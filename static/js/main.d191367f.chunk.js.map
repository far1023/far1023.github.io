{"version":3,"sources":["components/About.jsx","components/Tech.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["About","className","href","target","title","Tech","App","atEnter","opacity","atLeave","atActive","exact","path","to","component","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAkBeA,MAff,WACC,OACC,yBAAKC,UAAU,SACf,wCAAa,6BAAM,gDAA+B,6BAClD,qLACA,+BAAI,uBAAGA,UAAU,8BAAb,QAAJ,kBAA0E,6BAC1E,yBAAKA,UAAU,UACf,uBAAGC,KAAK,6BAA6BC,OAAO,SAASC,MAAM,WAAU,uBAAGH,UAAU,yBADlF,OAEA,uBAAGC,KAAK,+BAA+BC,OAAO,SAASC,MAAM,aAAY,uBAAGH,UAAU,0BAFtF,OAGA,uBAAGC,KAAK,oCAAoCC,OAAO,SAASC,MAAM,kBAAiB,uBAAGH,UAAU,8BAHhG,OAIA,uBAAGC,KAAK,8BAA8BC,OAAO,SAASC,MAAM,cAAa,uBAAGH,UAAU,6BCFzEI,MARf,WACC,OACC,6BACA,yBAAKJ,UAAU,QAAO,uBAAGA,UAAU,2BAA2B,uBAAGA,UAAU,0BAA0B,uBAAGA,UAAU,oCCuBrGK,MArBf,WACC,OACC,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAgBC,QAAS,CAAEC,QAAS,GAAKC,QAAS,CAAED,QAAS,GAAKE,SAAU,CAAEF,QAAS,GAAKP,UAAU,kBACtG,6BACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,KAClB,kBAAC,IAAD,CAAUC,GAAG,YAEb,kBAAC,IAAD,CAAOD,KAAK,SAASE,UAAWd,IAChC,kBAAC,IAAD,CAAOY,KAAK,QAAQE,UAAWT,KAE/B,yBAAKJ,UAAU,OAAOc,GAAG,SACzB,kBAAC,IAAD,CAAMF,GAAG,SAASZ,UAAU,SAA5B,SADA,WACmD,kBAAC,IAAD,CAAMY,GAAG,QAAQZ,UAAU,SAA3B,aCTjCe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,QD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d191367f.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../assets/style.css';\r\n\r\nfunction About() {\r\n\treturn (\r\n\t\t<div className=\"about\">\r\n\t\t<h2>Fuad Agil<br /><span>Web Developer</span></h2><br />\r\n\t\t<p>Years of experience in web development especially PHP and JS. Highly reusable and clean written code. Willing for remote or onsite(Pekanbaru) project.</p>\r\n\t\t<p> <i className=\"fa fa-fw fa-map-marker-alt\">&nbsp;</i> Pekanbaru, ID</p><br />\r\n\t\t<div className=\"social\">\r\n\t\t<a href=\"https://github.com/far1023\" target=\"_blank\" title=\"Fork me\"><i className=\"fab fa-fw fa-github\" /></a>&nbsp;\r\n\t\t<a href=\"https://twitter.com/fuadagil\" target=\"_blank\" title=\"Follow me\"><i className=\"fab fa-fw fa-twitter\" /></a>&nbsp;\r\n\t\t<a href=\"https://linkedin.com/in/fuadagilr\" target=\"_blank\" title=\"Add Connection\"><i className=\"fab fa-fw fa-linkedin-in\" /></a>&nbsp;\r\n\t\t<a href=\"mailto: fuadagilr@gmail.com\" target=\"_blank\" title=\"Send email\"><i className=\"fa fa-fw fa-envelope\" /></a>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default About;\r\n","import React from 'react';\r\nimport '../assets/style.css';\r\n\r\nfunction Tech() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t<div className=\"tech\"><i className=\"fab fa-php fa-4x fa-fw\" /><i className=\"fab fa-js fa-4x fa-fw\" /><i className=\"fab fa-bootstrap fa-4x fa-fw\" /></div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Tech;\r\n","import React from 'react';\nimport '../assets/style.css';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport { AnimatedSwitch } from 'react-router-transition';\n\nimport About from \"./About\";\nimport Tech from \"./Tech\";\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t<AnimatedSwitch atEnter={{ opacity: 0 }} atLeave={{ opacity: 0 }} atActive={{ opacity: 1 }} className=\"switch-wrapper\">\n\t\t<div>\n\t\t<Switch>\n\t\t<Route exact path=\"/\">\n\t\t<Redirect to=\"/about\" />\n\t\t</Route>\n\t\t<Route path=\"/about\" component={About} />\n\t\t<Route path=\"/tech\" component={Tech} />\n\t\t</Switch>\n\t\t<div className=\"link\" id=\"route\">\n\t\t<Link to=\"/about\" className=\"route\">About</Link> â€¢ <Link to=\"/tech\" className=\"route\">Tech</Link>\n\t\t</div>\n\t\t</div>\n\t\t</AnimatedSwitch>\n\t\t</Router>\n\t\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}